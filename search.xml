<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6</title>
      <link href="/2020/08/22/javascript%E9%AB%98%E9%98%B6/"/>
      <url>/2020/08/22/javascript%E9%AB%98%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><pre class=" language-JavaScript"><code class="language-JavaScript">   let     声明变量  不能重复声明 拥有块级作用域   const   声明常量  不能重复声明 拥有块级作用域</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;定时器和延时器&#39;</title>
      <link href="/2020/08/18/%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E5%BB%B6%E6%97%B6/"/>
      <url>/2020/08/18/%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E5%BB%B6%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><pre class=" language-JavaScript"><code class="language-JavaScript"> setInterval()              -定时调用                 -可以将一个函数,每隔一段时间执行一次                 -参数:                 1.回调函数,该函数会每隔一段时间被调用一次                 2.每次调用间隔的时间,单位是毫秒                 -返回值:                  返回一个number类型的数据                 这个数字用来作为定时器的唯一标识            定时器语法:            timer = setInterval(function(){                },time)                // 可以用来关闭定时器，需要一个参数来表示定影的定时器                clearInterval(timer)</code></pre><h2 id="案例-通过定时器变换图片"><a href="#案例-通过定时器变换图片" class="headerlink" title="案例:通过定时器变换图片"></a>案例:通过定时器变换图片</h2><pre class=" language-JavaScript"><code class="language-JavaScript">let img1 = document.getElementById('img1')        let imgArr = ['img/regist1.jpg','img/regist2.jpg','img/regist3.jpg','img/regist4.jpg']        let index = 0        let timer        let start1 = document.getElementById('start')        let stop1 = document.getElementById('stop')        start1.onclick = function(){            clearInterval(timer)            timer = setInterval(function(){             index = index % imgArr.length                img1.src = imgArr[index]                index++            },1000)        }        stop1.onclick = function(){            clearInterval(timer)        }</code></pre><h2 id="延时调用"><a href="#延时调用" class="headerlink" title="延时调用"></a>延时调用</h2><pre class=" language-JavaScript"><code class="language-JavaScript">      延时调用,          延时调用一个函数不马上执行，而是隔一段时间以后再执行          语法:               setTimeout(function(){               },time)</code></pre><h2 id="案例-计时器-制作平移特效"><a href="#案例-计时器-制作平移特效" class="headerlink" title="案例: 计时器 制作平移特效"></a>案例: 计时器 制作平移特效</h2><pre class=" language-JavaScript"><code class="language-JavaScript">                 语法:  obj  为需要平移的对象                        speed  正数:向右平移                               负数:向左平移                        target 目标位置function move(obj,speed,target){    let timmer             clearInterval(timmer)             timmer = setInterval(function(){                              let nowValue = obj.offsetLeft + speed                              if(speed <0 && nowValue < target || speed> 0 && nowValue > target){                                  nowValue = target                                  clearInterval(timmer)                              }                              obj.style.left = nowValue +'px'             },30)         }</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;BOM学习&#39;</title>
      <link href="/2020/08/18/BOM%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/08/18/BOM%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="BOM简述"><a href="#BOM简述" class="headerlink" title="BOM简述"></a>BOM简述</h2><pre class=" language-bash"><code class="language-bash">            BOM            -浏览器对象模型            -BOM可以使我们通过JS来操作浏览器            -BOM中为我们提供了一组对象，用来完成对浏览器的操作            -BOM对象                   Window                            -代表整个浏览器的窗口，同时window也是网页中的全局对象                   Navigator                            -代表当前浏览器的信息，通过该对象可以来识别不同的浏览器                   Location                            -代表当前浏览器的地址栏信息，通过Location可以获取地址信息或跳转页面                   History                            -代表浏览器的历史记录，可以通过该对象来操作浏览器的历史记录                              由于隐私的原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页                              而且该操作只在档次访问有效                   Screen                            -代表用户的屏幕信息，通过该对象可以获取到用户的显示器的相关信息                这些BOM对象都是作为window对象的属性使用                Window.属性</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;DOM学习&#39;</title>
      <link href="/2020/08/12/DOM%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/08/12/DOM%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h1><h2 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h2><pre class=" language-bash"><code class="language-bash">DOM: document object model即 文档对象模型简单地说做DOM操作:          1.找对象                           2.搞对象</code></pre><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><pre class=" language-JavaScript"><code class="language-JavaScript"><html ><head>    <title></title></head><body>    <button id="btn">我是一个按钮</button></body></html></code></pre><h2 id="事件简介"><a href="#事件简介" class="headerlink" title="事件简介"></a>事件简介</h2><pre class=" language-JavaScript"><code class="language-JavaScript">    事件，就是文档或浏览器窗口中发生的交互瞬间         用户和浏览器的交互行为</code></pre><h2 id="文档节点"><a href="#文档节点" class="headerlink" title="文档节点"></a>文档节点</h2><pre class=" language-JavaScript"><code class="language-JavaScript">  浏览器已经为我们提供文档节点 对象这个对象是window属性  可以在页面中直接使用，文档节点代表的是整个网页  document</code></pre><h2 id="获取到按钮对象"><a href="#获取到按钮对象" class="headerlink" title="获取到按钮对象"></a>获取到按钮对象</h2><pre class=" language-JavaScript"><code class="language-JavaScript">      获取到button对象     let btn = document.getElementById("btn")      修改按钮的文字     btn.innerHTML = '我是修改的按钮'     给对象添加事件监听      btn.addEventListener('click',function(){          alert('啦啦啦')      })      btn.onclick = function() {                  btn.innerHTML = '我是修改的按钮'      }</code></pre><h2 id="获取元素节点"><a href="#获取元素节点" class="headerlink" title="获取元素节点"></a>获取元素节点</h2><pre class=" language-JavaScript"><code class="language-JavaScript">  getElementById()  -通过id属性获取一个元素节点对象  getElementsByTagName()  -通过标签名获取一组元素节点对象  getElementsByName()  -通过name属性获取一组元素节点对象</code></pre><h2 id="元素的增删改替"><a href="#元素的增删改替" class="headerlink" title="元素的增删改替"></a>元素的增删改替</h2><pre class=" language-JavaScript"><code class="language-JavaScript">          // 创建一个li元素节点           let li = document.createElement("li")           // 创建一个文本节点对象，需要一个文本内容作为参数，将内容创建文本节点，并将新的节点返回          let bjText = document.createTextNode("北京")          // 将jbText添加到指定节点          li.appendChild(bjText)          let city = document.getElementById("city")          city.appendChild(li)          //在指定节点前插入节点          city.insertBefore(li,cq)          //在指定节点替换新节点          city.replaceChild(li,cq)          //删除指定节点          子节点.parentNode.removeChild(bj)</code></pre><p>##通过JS修改元素的样式</p><pre class=" language-JavaScript"><code class="language-JavaScript">       -通过style设置的都是内联样式    语法: 元素.style.样式名 = 样式值      样式值为字符串      注意:如果CSS的样式名中含有-,                                这种名称在JS中不合法，如background-color                                需要讲这种样式修改为驼峰命名法，                                去掉-，然后-后字母大写        -获取元素当前显示的样式   (ie支持)        语法: 元素.currentStyle.样式名        -getComputedStyle()这个方法来获取元素当前的样式        这个方法是window的方法，可以直接使用        需要两个参数:                     1.要获取样式的元素                     2.可以穿第一个伪元素，一般传null                     该方法返回一个对象                     scrollHright - scrollTop == clientHeight                     说明垂直滚动条到底了</code></pre><h2 id="事件兼容性"><a href="#事件兼容性" class="headerlink" title="事件兼容性"></a>事件兼容性</h2><pre class=" language-JavaScript"><code class="language-JavaScript">    event||window.event</code></pre><h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><pre class=" language-JavaScript"><code class="language-JavaScript">      addEventListener()       -通过这个方法也可以为元素绑定响应函数       -参数:             1.事件的字符串，不要on             2.回调函数，当事件触发时该函数会被调用             3.是否在捕获阶段触发事件，需要一个布尔值，一般传false             // 绑定bind函数             bind(btn,'click',function(){                 alert(1)             })             function bind(obj, eventStr, callback){                 if(obj.addEventListener){                     // 大部分浏览器兼容                     obj.addEventListener(eventStr, callback,false)                 } else {                     // IE9以下                     obj.attachEvent('on'+eventStr, callback)                 }             }</code></pre><h2 id="委派"><a href="#委派" class="headerlink" title="委派"></a>委派</h2><pre class=" language-JavaScript"><code class="language-JavaScript">   事件的委派     -指将事件同意帮顶给元素的共同的祖先元素，这样当后代元素上的事件触发时，会一直冒泡到祖先元素     从而通过祖先元素的响应函数来处理时间     -时间为拍是利用了冒泡，通过委派减少事件的绑定次数</code></pre><h2 id="图片切换练习"><a href="#图片切换练习" class="headerlink" title="图片切换练习"></a>图片切换练习</h2><pre class=" language-JavaScript"><code class="language-JavaScript"><div class="swper">            <p id="info"></p>            <img src="img/regist1.jpg" alt="" id="simg">            <div class="control">                <button id="prev">上一张</button>                <button id="next">下一张</button>            </div>        </div>        let prev = document.getElementById("prev")        let next = document.getElementById("next")        let img = document.getElementsByTagName("img")[0]        let info = document.getElementById("info")        let index = 0        let imgArr = ['img/regist1.jpg','img/regist2.jpg','img/regist3.jpg','img/regist4.jpg']        info.innerHTML = "一共"+imgArr.length+"张图片,当前第"+(index+1)+"张"        prev.onclick = function(){            index --            if(index<0){                index = imgArr.length-1            }            img.src = imgArr[index]            info.innerHTML = "一共"+imgArr.length+"张图片,当前第"+(index+1)+"张"        }        next.onclick = function(){            index ++            if(index>imgArr.length-1){                index = 0            }            img.src = imgArr[index]            info.innerHTML = "一共"+imgArr.length+"张图片,当前第"+(index+1)+"张"        }</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript基础篇-对象</title>
      <link href="/2020/08/04/javaScript%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/08/04/javaScript%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><pre class=" language-JavaScript"><code class="language-JavaScript">  创建对象         使用new关键字调用的函数，是构造函数，          构造函数专门创建对象的函数           let obj = new Object()          使用对象字面量来创建一个对象          let odj = {}          语法: {属性名:属性值,属性名:属性值...}          对象字面量的属性名可以加可以不加引号，建议不加          属性名和属性值是一组一组的名值对结构，          名和值之间使用:链接，多个名值对用,号隔开。          最后一个属性后不要再写,了          let obj2 = {name: "yangyang"}          添加属性           obj.name ='yangy'          obj.gender = '男'          odj.name = 'lisi'          odj.gender = '女'          console.log(obj);          console.log(odj);          读取对象中的属性   对象名.属性名   如果读取对象中没有的属性，不会报错，而返回undefined          console.log(obj.name);          console.log(odj.gender);           删除对象中的属性           语法: delete 对象.属性名           delete obj.name;            属性名:             -对象的属性名不能是数字开头             -尽量遵守标识符规范              语法: 对象["属性名"] = 属性值              obj['age'] = 22              JS中的变量都是保存在栈内存里面的              基本数据类型的值直接在栈内存中存储              值与值之间是独立的，修改一个变量是不会影响其他的变量              对象是保存在堆内存里面的，每创建一个新的对象就是开辟了一个新的空间             let a= 123;                                  let obj = new Object()             let b=a;                                     obj.name = 'swk'；             a++                                          let obj2 = obj                     栈内存                               堆内存                变量       值                         专门开辟一个空间来保存当前对象                a          124                              例 0x123                b          123                                 name = swk                obj        ox123(指针指向堆内存)                obj2       ox123(同一个对象)</code></pre><h2 id="使用工厂方法创建对象"><a href="#使用工厂方法创建对象" class="headerlink" title="使用工厂方法创建对象"></a>使用工厂方法创建对象</h2><pre class=" language-JavaScript"><code class="language-JavaScript">            function createPerson() {                创建一个新的对象                let obj = {}                相对相中添加属性                将新的对象返回                return obj            }            let a = createPerson()</code></pre><h2 id="使用构造函数创建对象"><a href="#使用构造函数创建对象" class="headerlink" title="使用构造函数创建对象"></a>使用构造函数创建对象</h2><pre class=" language-JavaScript"><code class="language-JavaScript">         创建一个构造函数，专门用来创建Person对象的         构造函数就是一个普通函数，创建方式和普通函数没有区别，         不同的是构造函数习惯上首字母大写   加new就是构造函数         构造函数和普通函数的区别就是调用方式不同         普通函数就是直接调用，而构造函数需要使用new关键字来调用         构造函数的执行流程:           1.立即创建一个新的对象           2.将新建的对象设置为函数中this，在构造函数中可以使用this来引用新建的对象           3.逐行执行函数中的代码           4.将新建的对象作为返回值返回            function Person() {            }            let pre = new Person()            使用instanceof可以检查一个对象是否是一个类的实例            function Dog(){            }            let dog = new Dog()</code></pre><h2 id="创建一个原型对象"><a href="#创建一个原型对象" class="headerlink" title="创建一个原型对象"></a>创建一个原型对象</h2><pre class=" language-JavaScript"><code class="language-JavaScript">           原型  prototype           我们所创建的每一个函数，绝吸气都会向函数中添加一个属性prototype           这个属性对应着一个对象，这个对象就是我们所谓的原型对象           如果函数作为普通函数调用prototype没有任何作用           指向该构造函数的对象，我们可以通过__proto__来访问该属性           原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，           我们可以讲对象中共有的内容，统一设置到原型对象中           创建一个原型对象             function MyClass(){}           调用构造函数           MyClass.prototype.name = "我是原型中的名字"           let mc = new MyClass()           console.log(mc.name)</code></pre><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><pre class=" language-JavaScript"><code class="language-JavaScript">        在JS中使用Date对象来表示一个时间        创建一个Date对象        如果直接使用构造函数创建一个Date对象，则会封装成当前代码执行的时间        let d = new Date()        console.log(d)        创建一个指定的时间对象        需要在构造函数中传递一个表示时间的字符串作为参数        时间日期格式  月份/日/年 时:分:秒        let d1 = new Date("08/04/2020")        console.log(d1)        getDate()        -获取当前日期对象是几日        getDay()        -获取今天是星期几  星期日=0        getTime()        -获取当前日期的时间戳        -时间戳:从格林威治标准1970年1月1日 0时0分0秒到当前日期的毫秒数(1秒 = 1000毫秒)        -计算机底层在保存时间使用的都是时间戳        getFullYear()        -获取当前年份        getMonth()        -获取当前月份  从0-11   月份+1         time = Date.now()        -获取当前代码执行时间戳</code></pre><h2 id="Math-对象"><a href="#Math-对象" class="headerlink" title="Math()对象"></a>Math()对象</h2><pre class=" language-JavaScript"><code class="language-JavaScript">            Math             -Math和他其对象不同，它不是一个构造函数                它属于一个工具类不用创建对象，它已经封装好现成的对象                 比如Math.PI 表示圆周率                 Math.ceil(-1.01)   1                 可以对一个数进行向上取整，小数位只要有值，就自动进位                 Math.floor(-1.99)    2                 向下取整，小数会被去掉                 Math.round(-1.51)        2                 四舍五入                 Math.random() *x                 生成一个0到x随机数</code></pre><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><pre class=" language-JavaScript"><code class="language-JavaScript">         创建一个正则表达式的对象         语法:  let 变量 = new RegExp("正则表达式","匹配模式")         在构造函数中可以传递一个匹配模式作为第二个参数         i 忽略大小写         g 全局匹配模式         使用字面量创建正则表达式:         let 变量 = /正则表达式/匹配模式         let reg = new RegExp()         正则表达式的方法:         test()         -使用这个方法可以用来检查一个字符串是否符合正则表达式规则，如果符合返回true，否则false              |表示或       []里的内容也是或关系             let reg = /a|b/            let reg = /[a-z]/      任意小写            let reg = /[A-Z]/      任意大写            let reg = /[A-z]/      任意字母            let reg = /a[abc]c/    a开头c结尾，中间abc任意一个            let reg = /^ab/        ^除了,除了ab,只要有其他的都是true            量词             - {n} 正好出现n次             - {m,n} 出现m-n次             - {m,} m次以上             -  + 至少一个             -  * 有没有都可以 0个或多个             -  ？有 1个或0个             -  ^ 以什么开头             -  $ 以什么结尾             -  \ 表示转义             -  \w 任意字母,数字,_  [A-z 0-9_]             -  \W 非\w             -  \d 任意数字             -  \D 非任意数字             -  \s 空格             -  \S 除了空格             -  \b 单词边界             -  \B 除了单词边界             -通过量词可以设置一个内容出现的次数             let reg = /a{3}/             let reg = /a{1,3}c/    出现1到3次</code></pre><h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><pre class=" language-JavaScript"><code class="language-JavaScript">    split()    -可以将一个字符串拆分为一个数组    -方法中可以穿第一个正则表达式作为参数，这样方法可以根据正则表达式拆分字符串</code></pre><h2 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h2><pre class=" language-JavaScript"><code class="language-JavaScript">    match()    -可以根据正则表达式，从一个字符串中将符合条件的内容提取出来    -默认情况下，match只会找到第一个符合要求的内容        -会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果    let reg = /[0-9]/g                ig或gi都可以，g全局匹配，i不分大小写    let a= '65as4d6as5f76as5f87as8f7a6sf8'    console.log(a.match(reg));                查找提取全部数字</code></pre><h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><pre class=" language-JavaScript"><code class="language-JavaScript">     replace()     -可以将字符串中指定内容替换成新的内容     -参数:      1.被替换内容   可以接收一个正则表达式      2.新的内容</code></pre><h2 id="案例-正则表达式来检查是否是手机号"><a href="#案例-正则表达式来检查是否是手机号" class="headerlink" title="案例 正则表达式来检查是否是手机号"></a>案例 正则表达式来检查是否是手机号</h2><pre class=" language-JavaScript"><code class="language-JavaScript">   1.以1开头        2.第二位3-9任意数字        3.3位以后任意数字9个       let reg = /^1[3-9][0-9]{9}$/</code></pre><h2 id="案例-去除前后的空格"><a href="#案例-去除前后的空格" class="headerlink" title="案例 去除前后的空格"></a>案例 去除前后的空格</h2><pre class=" language-JavaScript"><code class="language-JavaScript">      let str = "         hello          "      let reg = /^\s*|\s*$/g      a= a.replace(reg,'')</code></pre><h2 id="案例-正则表单时检查电子邮件"><a href="#案例-正则表单时检查电子邮件" class="headerlink" title="案例 正则表单时检查电子邮件"></a>案例 正则表单时检查电子邮件</h2><pre class=" language-JavaScript"><code class="language-JavaScript">    let reg = /^\w{3,}(\.\w+)*@[A-z0-9]+(\.[A-z]{2,5}){1,2}$/    let email = '723@qq.com'    console.log(reg.test(email));</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础学习</title>
      <link href="/2020/08/02/JavaScript%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%95%B0%E7%BB%84/"/>
      <url>/2020/08/02/JavaScript%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="数组基本概念"><a href="#数组基本概念" class="headerlink" title="数组基本概念"></a>数组基本概念</h2><pre class=" language-JavaScript"><code class="language-JavaScript">           内建对象           宿主对象           自定义的对象           数组(Array)            -数组也是一个对象            -它和普通对象类似，也是用来存储一些值            -不同的是普通对象是使用字符串作为属性名            而数组是使用数字来作为索引操作元素            -索引:            从0开始的整数就是索引            -数组的存储性能比普通对象要好，在开发中经常使用数组来存储一些数据</code></pre><h2 id="创建一个数组对象"><a href="#创建一个数组对象" class="headerlink" title="创建一个数组对象"></a>创建一个数组对象</h2><pre class=" language-JavaScript"><code class="language-JavaScript">            let arr = new Array()        typeof 为 Object        或    let arr1 = []</code></pre><h2 id="向数组中添加元素"><a href="#向数组中添加元素" class="headerlink" title="向数组中添加元素"></a>向数组中添加元素</h2><pre class=" language-JavaScript"><code class="language-JavaScript">            语法: 数组名[索引] = 值            arr[0] = 10            arr[1] = 33            读取数组中的元素            语法: 数组名[索引]            arr[0]               如果索引不存在，不会报错，会返回undefined</code></pre><h2 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h2><pre class=" language-JavaScript"><code class="language-JavaScript">            获取数组长度            可以使用length属性获取数组的长度 (元素的个数)            语法: 数组.length            对于非连续的数组，使用length()会返回最大索引+1            尽量不要创建非连续的数组，没有值得会空出来，以,隔开            arr.length</code></pre><h2 id="向数组的最后一个位置添加元素"><a href="#向数组的最后一个位置添加元素" class="headerlink" title="向数组的最后一个位置添加元素"></a>向数组的最后一个位置添加元素</h2><pre class=" language-JavaScript"><code class="language-JavaScript">             语法: 数组[数组.length] = 值            arr[arr.length] = 70</code></pre><h2 id="数组的四个方法"><a href="#数组的四个方法" class="headerlink" title="数组的四个方法"></a>数组的四个方法</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">            push()             -该方法可以向数组末尾添加一个或多个元素，并返回数组的新的长度             -可以将要添加的元素作为方法的参数传递             这样这些元素将会自动添加到数组的末尾             arr.push('yang','li','zhang')</code></pre><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">            pop()             -该方法可以向数组最后一个元素 b并将删除的元素作为返回值返回             arr.pop()</code></pre><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">            unshift()             -该方法在数组开头添加一个或多个元素，并返回新的数组长度             -向前面插入元素以后，其他元素索引会依次调整            arr.unshift('zou','wu','zheng')</code></pre><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">           shift()              -删除数组中第一个元素，并将删除的元素作为返回值返回            arr.shift()</code></pre><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">           slice()              -可以从数组中提取出选定的元素.封装成一个新数组返回              -参数:                 1.截取开始位置的索引   包含开始，不包含结束                 2.截取结束位置的索引                      第二个参数可以省略不写                      可以是负数            arr.slice()</code></pre><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">           splice()              -删除数组中指定元素，并向数组添加新元素              -参数:                    第一个，表示开始位置的索引                    第二个，表示删除的数量                    第三个及以后元素，可以传递一些新的元素将会替换掉开始索引的元素            arr.shift()</code></pre><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">           concat()              -可以连接两个数组或多个数组并返回新数组               -该方法不会影响原数组            let result = arr.concat(arr1,)</code></pre><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">           join('')                -引号中可以指定一个字符串组委参数，作为数组中元素的连接符              -如果不传将会默认,     如果不想有任何符号连接，传入 '' 空字符              -将数组转换成字符串              -该方法不会影响原数组            let result = arr.join()</code></pre><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">           reverse()                -该方法用来反转数组(前面到后面，后面的到前面)              -该方法会影响原数组        arr.reserse()</code></pre><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><pre class=" language-JavaScript"><code class="language-JavaScript">             sort()                -可以用来对数组中的元素进行排序              -sort调用一个回调函数，形参a,b              -做为规则 返回 大于0 是a,b交换位置              -返回小于0 是a,b不换位置              -返回0 是a,b相等，不换位置              -如果需要升序 返回  a-b              -如果需要降序 返回  b-a              -该方法会影响原数组            arr.sort()            let arr = [19,23,6,4,3,2]            arr.sort(function(a,b){                if(a>b){                    return 1                } else if(a<b){                    return -1                } else{                    return 0                }                正序 return a-b                倒序 return b-a            })            console.log(arr);</code></pre><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><pre class=" language-JavaScript"><code class="language-JavaScript">           所谓遍历数组，就是将数组中所有的元素都取出来              for(let i=0; i<arr.length; i++){                  console.log(arr[i])              }</code></pre><h2 id="forEach遍历"><a href="#forEach遍历" class="headerlink" title="forEach遍历"></a>forEach遍历</h2><pre class=" language-JavaScript"><code class="language-JavaScript">           JS中为我们听过了一个方法，来遍历数组           forEach() 方法需要一个函数作为参数            -像这种函数，由我们创建但是不由我们调用的，成为回调函数            -数组中有几个元素函数就会执行几次            浏览器以实参传递进来，我们可以定义形参，来读取这些内容            浏览器会在回调函数中传递三个参数:               1.第一个参数，就是当前正在遍历的元素               2.第二个参数，就是当前正在遍历的元素的索引               3.第三个元素，就是正在变得数组               注意:IE8及以下不要使用此方法           arr.forEach(function(value,index, obj){})</code></pre><h2 id="案例-创建一个函数，遍历找出数组中年龄满18的对象，保存在一个新的数组中"><a href="#案例-创建一个函数，遍历找出数组中年龄满18的对象，保存在一个新的数组中" class="headerlink" title="案例:创建一个函数，遍历找出数组中年龄满18的对象，保存在一个新的数组中"></a>案例:创建一个函数，遍历找出数组中年龄满18的对象，保存在一个新的数组中</h2><pre class=" language-JavaScript"><code class="language-JavaScript">           方案一            function Person(name,age){                 this.name = name                 this.age = age             }            let n = new Person("孙悟空",18)            let n1 = new Person("猪八戒",28)            let n2 = new Person("沙和尚",8)            let n3 = new Person("嫦娥",16)            let n4 = new Person("玉兔精",38)            let perArr = [n,n1,n2,n3,n4]            console.log(perArr);            function compPer(perArr){                let newArr = []                for(let i=0;i<perArr.length;i++) {                    if(perArr[i].age>=18) {                        newArr.push(perArr[i])                    }                }                return newArr            }            console.log(compPer(perArr));            方案二            let newArr = []            perArr.forEach(function(a,b){                if(a.age>=18){                    newArr.push(a)                }             })             console.log(newArr);</code></pre><h2 id="案例-数组去重复"><a href="#案例-数组去重复" class="headerlink" title="案例:数组去重复"></a>案例:数组去重复</h2><pre class=" language-JavaScript"><code class="language-JavaScript">let arr = [1,2,3,4,5,6,1,3,2,4,1,3,3]         function deleT(arr){             // 获取所有元素             for(let i=0;i<arr.length;i++) {                 // 获取当前元素后所有的元素                for(let j=i+1;j<arr.length;j++) {                    // 判断第一个是否等于第二个，删除第二个                    if(arr[i] == arr[j]) {                        arr.splice(j,1)                        // 又比了一遍                        j--;                    }                }             }         }    deleT(arr)        console.log(arr);</code></pre><h2 id="数组正序排列"><a href="#数组正序排列" class="headerlink" title="数组正序排列"></a>数组正序排列</h2><pre class=" language-JavaScript"><code class="language-JavaScript">let arr = [1444,2345,112332,223,4,5,222,25,25,6,7,7,7,7]        function detD(arr) {        for(let i=0;i<arr.length;i++){            for(let j=i+1;j<arr.length;j++){                if(arr[i]>arr[j]){                >是小的在前面，大的在后面                    let n                         n=arr[j]                         arr[j]=arr[i]                         arr[i]=n                }            }        }        }        detD(arr)        或者        arr.sort(function(a,b){            return a-b        })        console.log(arr);</code></pre><h2 id="数组倒序排列"><a href="#数组倒序排列" class="headerlink" title="数组倒序排列"></a>数组倒序排列</h2><pre class=" language-JavaScript"><code class="language-JavaScript">let arr = [1444,2345,112332,223,4,5,222,25,25,6,7,7,7,7]        function detD(arr) {        for(let i=0;i<arr.length;i++){            for(let j=i+1;j<arr.length;j++){                if(arr[i]<arr[j]){               <是大的在前面，小的在后面                    let n                         n=arr[j]                         arr[j]=arr[i]                         arr[i]=n                }            }        }        }        detD(arr)        console.log(arr);</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础学习-函数</title>
      <link href="/2020/07/31/JavaScript%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%87%BD%E6%95%B0/"/>
      <url>/2020/07/31/JavaScript%E5%9F%BA%E7%A1%80%E7%AF%87-%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><pre class=" language-bash"><code class="language-bash">    函数 <span class="token keyword">function</span>      --函数也是一个对象      --函数可以封装一些功能<span class="token punctuation">(</span>代码<span class="token punctuation">)</span>，在需要时可以执行这些功能<span class="token punctuation">(</span>代码<span class="token punctuation">)</span>      --函数可以保存一些代码在需要的时候调用      --使用typeof检查一个函数对象时，返回function  </code></pre><h1 id="创建一个函数3种方法"><a href="#创建一个函数3种方法" class="headerlink" title="创建一个函数3种方法"></a>创建一个函数3种方法</h1><h2 id="使用构造函数来创建一个函数对象"><a href="#使用构造函数来创建一个函数对象" class="headerlink" title="使用构造函数来创建一个函数对象"></a>使用构造函数来创建一个函数对象</h2><pre class=" language-JavaScript"><code class="language-JavaScript">           在实际开发中很少使用构造函数来创建一个函数对象     let fun = new Function("console.log('这是我的第一个函数')")     fun()</code></pre><h2 id="使用函数声明来创建一个函数"><a href="#使用函数声明来创建一个函数" class="headerlink" title="使用函数声明来创建一个函数"></a>使用函数声明来创建一个函数</h2><pre class=" language-JavaScript"><code class="language-JavaScript">   使用函数声明来创建一个函数    语法:         function 函数名([形参1,形参2,形参N]) {            语句...        }   function fun2(){       console.log('这是我的第二个函数')       alert("哈哈哈，这是我的第二个函数")       document.write("···············")   }       fun2()</code></pre><h2 id="使用函数表达式来创建一个函数对象"><a href="#使用函数表达式来创建一个函数对象" class="headerlink" title="使用函数表达式来创建一个函数对象"></a>使用函数表达式来创建一个函数对象</h2><pre class=" language-JavaScript"><code class="language-JavaScript">     语法:        let 函数名 =  function([形参1,形参2,形参N]) {          语句...      }     let fun3 =  function(){          console.log('我是匿名函数中封装的代码')      }</code></pre><h2 id="调用一个函数"><a href="#调用一个函数" class="headerlink" title="调用一个函数"></a>调用一个函数</h2><pre class=" language-JavaScript"><code class="language-JavaScript">       封装到函数中的代码不会立即执行       函数中的代码会在函数调用的时候执行       调用函数语法:  函数对象()       当调用函数时，函数中封装的代码会按照顺序执行     fun()     调用函数     fun2()</code></pre><h2 id="例-定义一个求和的函数"><a href="#例-定义一个求和的函数" class="headerlink" title="例: 定义一个求和的函数"></a>例: 定义一个求和的函数</h2><pre class=" language-JavaScript"><code class="language-JavaScript">       可以在函数的()中来指定一个或多个形参(形式参数)       多个形参之间,隔开，声明形参就相当于在内部生命了对应的变量       但是并不赋值       function sum(a,b) {                        console.log(a+b);       }       -在调用函数时，可以在()中指定实参(实际参数)       --实参将会赋值给函数中对应的形参       -调用函数时解析器不会检查实参类型       --所以注意，是否有可能会接收到非法的参数，如果有可能则需要对需要的参数进行检查       -调用函数时，解析器也不会检查实参的数量       --多余的实参也不会被赋值       --如果实参少于形参数量，没有对应实参的形参将是 undefined       sum(3,4)</code></pre><h2 id="返回一个函数"><a href="#返回一个函数" class="headerlink" title="返回一个函数"></a>返回一个函数</h2><pre class=" language-JavaScript"><code class="language-JavaScript">       往往创建了一个函数后，会设置函数的返回       语法:            return 值     return后的值将会作为函数的执行结果返回     可以定一个变量来接收这个结果     return 后可以返回任意类型     在函数中,return 后的代码都不会执行     return 后不跟值 就是 undefined     function sum(a,b,c){         let d = a + b + c         return d         //return     }     let result = sum(4,7,8)     console.log(result)</code></pre><h2 id="练习-定义一个函数，判断一个数是否是偶数并返回"><a href="#练习-定义一个函数，判断一个数是否是偶数并返回" class="headerlink" title="练习:定义一个函数，判断一个数是否是偶数并返回"></a>练习:定义一个函数，判断一个数是否是偶数并返回</h2><pre class=" language-JavaScript"><code class="language-JavaScript">function isOu(num){                return num % 2 ==0            }            let a = prompt('请输入一个数:')            alert(isOu(a))</code></pre><h2 id="练习-定义一个函数，根据半径计算一个圆的面积，并返回结果"><a href="#练习-定义一个函数，根据半径计算一个圆的面积，并返回结果" class="headerlink" title="练习:定义一个函数，根据半径计算一个圆的面积，并返回结果"></a>练习:定义一个函数，根据半径计算一个圆的面积，并返回结果</h2><pre class=" language-JavaScript"><code class="language-JavaScript">function mianji(r){            let pi = 3.14            return pi*r*r            }            let a = prompt('请输入一个半径:')            alert(mianji(a))</code></pre><h2 id="传值实参是对象或函数"><a href="#传值实参是对象或函数" class="headerlink" title="传值实参是对象或函数"></a>传值实参是对象或函数</h2><pre class=" language-JavaScript"><code class="language-JavaScript">function news(info){                    console.log("我是"+ info.name,"今年"+info.age+"岁","是一个"+info.gender+"孩","住在"+obj.addr);                        }                        let obj = {                            name: "杨洋",                            age: 18,                            gender: "男",                            addr: "东湖"                        }                        news(obj)        news()             如: 给你冰激凌           -调用函数           -相当于使用函数的返回值        news               如: 给你冰激凌机           -函数对象           -相当于直接使用函数对象</code></pre><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><pre class=" language-JavaScript"><code class="language-JavaScript">       匿名函数       立即执行函数       函数定义完，立即被调用，这种函数叫做立即执行函数       立即执行函数往往只会执行一次      ( function(){           alert("我是一个匿名函数···立即执行函数")       })()</code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><pre class=" language-JavaScript"><code class="language-JavaScript">函数也可以成为对象的属性,如果一个函数作为一个对象的属性保存那么称为这个函数的方法let obj = {}        obj.name = 'yang'        obj.age = 18        obj.sayName = function(){            console.log(obj.name);        }        调用方法        obj.sayName()</code></pre><h2 id="枚举对象中的语句"><a href="#枚举对象中的语句" class="headerlink" title="枚举对象中的语句"></a>枚举对象中的语句</h2><pre class=" language-JavaScript"><code class="language-JavaScript">                枚举对象中的属性                使用for...in 语句                语法:                    for(let 变量 in 对象){                   }                   for ... in语句 对象中有几个属性，循环就会几次                   每次执行时会把每个属性赋值给变量                   n为属性名                   for(let n in obj) {                       console.log(n)                       console.log(obj[n])                   }</code></pre><h2 id="作用域-重点注意"><a href="#作用域-重点注意" class="headerlink" title="作用域(重点注意)"></a>作用域(重点注意)</h2><pre class=" language-JavaScript"><code class="language-JavaScript">            作用域                  -作用域指一个变量的作用的范围                  -JS中一共有两种作用域:                    1.全局作用域                       -直接编写在script标签中的JS代码，都在全局作用域中                       -全局作用域在页面打开时创建，在页面关闭时销毁                       -在全局作用域中有一个全局对象window，                       它代表一个浏览器的窗口，它由浏览器创建                       我们可以直接使用                       -全局作用域在任意位置都可以访问到                       -在全局变量中:                          创建的变量都会座位一个window对象的属性保存                    变量的声明提前                      -使用var关键字声明的变量，会在所有的代码执行之前被声明(但是不会复制)                        但是如果声明变量时不使用var关键字，则变量不会被声明提前                    函数的声明提前                     -使用函数声明形式创建的函数 function 函数(){}                       它会在所有的代码执行之前就被创建，所以我们可以在函数声明前来调用函数                     -使用函数表达式创建，不会被提前声明，不能先调                     fun();                       function fun(){                           console.log('我是可以声明前调用函数')                       }                    var fun2= function(){                        console.log('我是必须声明后调用函数')                    }                    fun2();                    2.函数作用域                    -调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁                    -每调用一次函数就会创建一个新的函数作用域，他们之间是相互独立的                    -在函数作用域中可以访问到全局作用域的变量                    -当在函数作用域在操作一个变量时，现在自身作用域寻找，如果有就直接使用，如果没有则像上一个作用域中寻找                    -在函数中访问全局变量 用 window            注意:                            在函数中不使用var 为 声明全局变量                     var c= 33                    function fun3(){                             c = 10                        console.log('c='+c)    c=10                     }                    fun3()                    console.log(c);            c=10        ---------------------------------------------------------                                在函数中使用var 为 声明局部变量                    var c= 33                    function fun3(){                            var c = 10                                console.log('c='+c)     c=10                    }                    fun3()                    console.log(c);              c=33          ---------------------------------------------------------        在函数中不使用var 为 声明全局变量                    var c= 33                    function fun3(){                        console.log('c='+c)       c=33                        c = 10                    }                    fun3()                    console.log(c);               c=10        ---------------------------------------------------------                    在函数中使用var 为 声明局部变量                    var c= 33                    function fun3(){                        console.log('c='+c)     c=undefined                        var c = 10                    }                    fun3()                    console.log(c);             c=33        ---------------------------------------------------------            在函数中使用var 为 声明局部变量                var c= 33                function fun3(){                    var c                    console.log('c='+c)           c=undefined                  c = 10                }                fun3()                console.log(c);                   c=33        ---------------------------------------------------------                在函数中使用var 为 声明局部变量                        var c= 33                        function fun3(c){                            console.log('c='+c)           c=undefined                          c = 10                        }                        fun3()                        console.log(c);                   c=33        ---------------------------------------------------------                            在函数中使用var 为 声明局部变量                                        var c= 33                                        function fun3(c){                                            console.log('c='+c)           c=33                                          c = 10                                        }                                        fun3(33)                                        console.log(c);                   c=33</code></pre><h2 id="This"><a href="#This" class="headerlink" title="This"></a>This</h2><pre class=" language-JavaScript"><code class="language-JavaScript">        解析器在调用函数每次都会向函数内部传递进一个隐含的参数        这个隐含的参数是this,this指向的是一个对象        这个对象我们称为函数执行的上下文对象        根据函数的调用方式不同，this会指向不同的对象           1.以函数形式调用，this永远都是window           2.以方法形式调用，this就是调用方法的对象           3.以构造函数形式调用，this是新创建的那个对象           4.使用call和apply调用时,this是指定的那个对象</code></pre><h2 id="call-和apply"><a href="#call-和apply" class="headerlink" title="call()和apply()"></a>call()和apply()</h2><pre class=" language-JavaScript"><code class="language-JavaScript">              -这两个方法都是函数对象的方法，需要通过函数对象来调用              例:  function fun(){                  alert('我是fun函数')              }              fun 为函数对象              fun() 为调用函数              fun.apply() 都是调用函数执行              fun.apply() 都是调用函数执行              -在调用call()和apply() 可以将一个对象指定为第一个参数                此时这个对象将会成为函数执行时的this              let obj = {}              fun.call(obj,实参1,实参2)              fun.apply(obj1,[实参1,实参2])              例:              function fun(a,b){                  name = '张扬'                  console.log('a='+a)                  console.log('b='+b)                  console.log(this.name)              }              let obj = {name:'杨洋'}              let obj1 = {name:'李白'}              fun(5,6)                5,6 张扬              fun.call(obj,2,3)       2,3 杨洋              fun.apply(obj1,[3,4])   3,4 李白</code></pre><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><pre class=" language-JavaScript"><code class="language-JavaScript">   封装函数实参的对象   arguments    -arguments是一个类数组对象,他也可以通过索引来操作数据，也可以获取长度    -在调用函数时，我们所传递的实参都会在arguments中保存    -在arguments.length可以用来获取实参长度    -即使不定义形参，也可以使用arguments来使用实参    -有个属性叫做callee    就是当前指向的函数对象    function fun(){        console.log(arguments[2]);    34    }    fun(1,2,34,5)</code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><pre class=" language-JavaScript"><code class="language-JavaScript">  什么是闭包:  当一个嵌套的内部函数引用了嵌套的外部函数的变量时，产生闭包  产生闭包的条件: 函数嵌套，内部函数引用了外部函数的数据</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础学习</title>
      <link href="/2020/07/27/javaScript%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
      <url>/2020/07/27/javaScript%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-实现方式（各浏览器引擎）"><a href="#JavaScript-实现方式（各浏览器引擎）" class="headerlink" title="JavaScript 实现方式（各浏览器引擎）"></a>JavaScript 实现方式（各浏览器引擎）</h2><h4 id="ECMAScript-是JavaScript的标准，但这俩基本是一个意思-Google-Chrome-（V8引擎）-目前执行js最快的引擎"><a href="#ECMAScript-是JavaScript的标准，但这俩基本是一个意思-Google-Chrome-（V8引擎）-目前执行js最快的引擎" class="headerlink" title="ECMAScript 是JavaScript的标准，但这俩基本是一个意思  Google Chrome （V8引擎） 目前执行js最快的引擎"></a>ECMAScript 是JavaScript的标准，但这俩基本是一个意思  Google Chrome （V8引擎） 目前执行js最快的引擎</h4><h2 id="JS的特点："><a href="#JS的特点：" class="headerlink" title="JS的特点："></a>JS的特点：</h2><pre class=" language-bash"><code class="language-bash">-解释型语言-类似于C和Java的语法结构-动态语音-基于原型的面向对象</code></pre><h2 id="JavaScript-基本语法"><a href="#JavaScript-基本语法" class="headerlink" title="JavaScript 基本语法"></a>JavaScript 基本语法</h2><pre class=" language-bash"><code class="language-bash">        alert<span class="token punctuation">(</span><span class="token string">'弹出一个内容框'</span><span class="token punctuation">)</span>        document.write<span class="token punctuation">(</span><span class="token string">'可以向body里输出一个内容'</span><span class="token punctuation">)</span>        console.log<span class="token punctuation">(</span><span class="token string">'向控制台输出一个内容'</span><span class="token punctuation">)</span>        1.JS中严格区分大小写        2.JS中每一条语句已分号<span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">)</span>结尾 -如何不加分号，会消耗系统资源，有一些时候会加错分号        3.JS会忽略多个空格和换行，所以可以利用空格和换行来进行代码格式化</code></pre><pre class=" language-bash"><code class="language-bash">   字面量,都是一些不可改变的值  都是可以直接使用的   变量,可以用来保存字面量，而且变量可以任意变量</code></pre><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><pre class=" language-bash"><code class="language-bash">   -在JS中可以由自己随意命名的称为标识符   -命名规则:     1.标识符中可以含有数字、字母、_、$     2.标识符不能以数字开头     3.标识符不能是ES中的关键字或保留字 例:<span class="token punctuation">(</span>var var <span class="token operator">=</span> 123<span class="token punctuation">)</span>     4，规范  -首字母小写,每个单词开头字母大写,其余字母小写</code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><pre class=" language-bash"><code class="language-bash">   在JS中一共有六种基本数据类型   String 字符串   Number 数值   Boolean 布尔型   Null 空值   Undefined 未定义   Symbol 原始数据类型   引用数据类型   Object 对象   如何使用？   -使用定义字符串 <span class="token punctuation">(</span>在JS中使用引号引起来<span class="token punctuation">)</span>   const str <span class="token operator">=</span> <span class="token string">'hello'</span></code></pre><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><pre class=" language-bash"><code class="language-bash">   \<span class="token string">' 表示 '</span>   \<span class="token string">" 表示 "</span>   \n 表示 换行   \t 表示 制表符 相当于按下Tab   \\ 表示 \   typeof  检查一个变量的类型   JS中表示最大的值   Number.MAX_VALUE   布尔值   布尔值只有两个,主要是做逻辑判断   <span class="token boolean">true</span> 真   <span class="token boolean">false</span> 假   Null 类型 只有一个 null   -null这个值，专门用来表示一个为空的对象   Undefined<span class="token punctuation">(</span>未定义<span class="token punctuation">)</span>    -当声明一个变量，但是并不给变量赋值时，他得知就是undefined</code></pre><h2 id="强制转换类型"><a href="#强制转换类型" class="headerlink" title="强制转换类型"></a>强制转换类型</h2><pre class=" language-bash"><code class="language-bash">方式:      - 调用被转换数据类型的toString<span class="token punctuation">(</span><span class="token punctuation">)</span>方法     调用方法 就是 xxx.yyy方法<span class="token punctuation">(</span><span class="token punctuation">)</span>      - 调用String<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数 转换         函数 使用  String<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>强制转数字方式:        -调用Number<span class="token punctuation">(</span><span class="token punctuation">)</span>      注意:            1.如果纯数字的字符串,则直接转换称 --<span class="token operator">></span> 数字           2.如果字符串中有其他字符,则转换成 --<span class="token operator">></span> NaN           3.如果字符串为空格或空字符串,转换成 --<span class="token operator">></span> 0           4.如果变量为 null,转换成 --<span class="token operator">></span> 0           5.如果变量为 布尔值 则  <span class="token boolean">true</span> --<span class="token operator">></span> 1, <span class="token boolean">false</span> --<span class="token operator">></span> 0           6.如果变量为 undefined 则转换成 NaN方式二:       -这种专门用来对付字符串  <span class="token punctuation">(</span>非字符型  会先转换成字符型再进行转<span class="token punctuation">)</span>      -parseInt<span class="token punctuation">(</span><span class="token punctuation">)</span>  转换成  number        -parseFloat<span class="token punctuation">(</span><span class="token punctuation">)</span>  转换成 小数型      Boolean<span class="token punctuation">(</span><span class="token punctuation">)</span>      数字转布尔   除了 0 和 NaN  都是true      字符串转布尔  除了 <span class="token string">''</span>  都是true      null,undefined 转 为 <span class="token boolean">false</span></code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre class=" language-bash"><code class="language-bash">        进行运算符操作时   首先会先把 变量转换成数字 再进行 运算        任何值和NaN做运算，都是NaN        如果对两个值 做加法运算，有非字符串 ，做拼接操作  例<span class="token punctuation">(</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> 100 +<span class="token string">'1'</span> -<span class="token string">'100'</span><span class="token punctuation">)</span>  //901        隐式转换类型        如果是减法运算， 便是做转换数值 <span class="token punctuation">(</span>Number类型<span class="token punctuation">)</span> 减法</code></pre><pre class=" language-bash"><code class="language-bash">逻辑运算符         <span class="token operator">&amp;&amp;</span>   如果第一个为true    返回第二个     <span class="token keyword">let</span> result<span class="token operator">=</span> 2 <span class="token operator">&amp;&amp;</span> 0       返回false那个 0         <span class="token operator">&amp;&amp;</span>   如果第一个为false   返回第一个     <span class="token keyword">let</span> result<span class="token operator">=</span> 0 <span class="token operator">&amp;&amp;</span> 2       返回false那个 0         <span class="token operator">||</span>   如果第一个为true    返回第一个     <span class="token keyword">let</span> result<span class="token operator">=</span> 1 <span class="token operator">||</span> 0       返回true 那个 1         <span class="token operator">||</span>   如歌第二个为false   返回第二个     <span class="token keyword">let</span> result<span class="token operator">=</span> 0 <span class="token operator">||</span> 1       返回true 那个 1</code></pre><pre class=" language-bash"><code class="language-bash">相等运算         NaN不与任何相等         undefined <span class="token operator">==</span> null  //true         isNaN<span class="token punctuation">(</span><span class="token punctuation">)</span>  检查一个数是不是NaN</code></pre><h2 id="if-switch相关语法"><a href="#if-switch相关语法" class="headerlink" title="if,switch相关语法"></a>if,switch相关语法</h2><pre class=" language-bash"><code class="language-bash">语法: if<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>-if语句只能控制紧跟其后的那一条语句-if语句想要控制多条语句，可以将语句写进 代码块中<span class="token punctuation">{</span> <span class="token punctuation">}</span>-if语句后代码块不是必须的，但为了条理清楚，尽量加上代码块格式语法二: if<span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句<span class="token punctuation">}</span> <span class="token keyword">else</span> if<span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    语句<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>-从上往下一次进行判断-如果是true,执行当前代码块语句-如果是false,依次向下判断下一个if语句-如果都不满足执行 <span class="token keyword">else</span> 语句块语法: switch<span class="token punctuation">(</span>值<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> 1:     表达式    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 2:    表达式    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 3:    表达式    <span class="token keyword">break</span><span class="token punctuation">;</span>    default:    表达式    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>-使用break来退出switch-default  所有的都无法成功时,调用default</code></pre><h2 id="弹出框类型"><a href="#弹出框类型" class="headerlink" title="弹出框类型"></a>弹出框类型</h2><pre class=" language-JavaScript"><code class="language-JavaScript"> prompt('请输入小明的期末成绩:');  页面弹出一个带有输入框的弹框。 用户输入的内容作为函数的返回值返回，可以直接定义一个变量来接收该内容 alert();  页面弹出一个弹框</code></pre><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><pre class=" language-bash"><code class="language-bash">循环语句: 通过循环语句可以反复的执行一段代码多次while循环 -语法:        while<span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>           语句<span class="token punctuation">..</span>.       <span class="token punctuation">}</span>       <span class="token keyword">break</span> 可以退出循环for循环1.初始化表达式2.条件表达式3.更新表达式for循环语法: for<span class="token punctuation">(</span>①初始化表达式<span class="token punctuation">;</span>②条件表达式<span class="token punctuation">;</span>④更新表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ③语句<span class="token punctuation">..</span>.<span class="token punctuation">}</span>   for循环执行流程:   ①执行初始化表达式，初始化变量   ②执行条件表达式，判断是否执行循环。     如果为true，则执行循环③     如果为false，则终止循环   ④执行更新表达式，更新表达式执行完毕继续重复②  for循环中的三个部分都可以省略 也可以写在外部    死循环:  for<span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      alert<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础环境搭建-安装配置vue-router</title>
      <link href="/2020/07/15/vue%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEvue-router/"/>
      <url>/2020/07/15/vue%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEvue-router/</url>
      
        <content type="html"><![CDATA[<h2 id="创建项目，使用命令引入vue-router"><a href="#创建项目，使用命令引入vue-router" class="headerlink" title="创建项目，使用命令引入vue-router"></a>创建项目，使用命令引入vue-router</h2><pre><code>npm install vue-router --save</code></pre><h2 id="创建router文件夹，创建index-js默认文件"><a href="#创建router文件夹，创建index-js默认文件" class="headerlink" title="创建router文件夹，创建index.js默认文件"></a>创建router文件夹，创建index.js默认文件</h2><p>##完成基本配置</p><pre><code>//首先引入vue.jsimport Vue from &#39;vue&#39;//引入vue-routerimport VueRouter from &#39;vue-router&#39;//使用Vue.user(VueRouter)//创建路由  例:const routes = [    { path: &#39;/&#39;, compontent: ()=&gt; import(&#39;components/home/Home.vue&#39;) }]//创建router实例 对象const router = new VueRouter({    //挂载路由    router,    //哈希模式和传统模式切换     mode: &#39;history&#39;})//抛出对象export default router</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub使用详解</title>
      <link href="/2020/07/14/GitHub%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/07/14/GitHub%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="修改仓库文件"><a href="#修改仓库文件" class="headerlink" title="修改仓库文件"></a>修改仓库文件</h2><pre><code>点击文件名，进行修改</code></pre><h2 id="Git安装与使用"><a href="#Git安装与使用" class="headerlink" title="Git安装与使用"></a>Git安装与使用</h2><pre><code>下载与安装：Git官网下载</code></pre><h2 id="Git基本工作流程"><a href="#Git基本工作流程" class="headerlink" title="Git基本工作流程"></a>Git基本工作流程</h2><h3 id="Git工作区域"><a href="#Git工作区域" class="headerlink" title="Git工作区域"></a>Git工作区域</h3><h4 id="工作区，暂存区，仓库"><a href="#工作区，暂存区，仓库" class="headerlink" title="工作区，暂存区，仓库"></a>工作区，暂存区，仓库</h4><h4 id="git-status-查看当前状态"><a href="#git-status-查看当前状态" class="headerlink" title="git status 查看当前状态"></a>git status 查看当前状态</h4><h4 id="git-add-“文件名”-添加到暂存区"><a href="#git-add-“文件名”-添加到暂存区" class="headerlink" title="git add “文件名” 添加到暂存区"></a>git add “文件名” 添加到暂存区</h4><h4 id="git-status-再次查看状态"><a href="#git-status-再次查看状态" class="headerlink" title="git status 再次查看状态"></a>git status 再次查看状态</h4><h4 id="git-commit-m-“提交描述”"><a href="#git-commit-m-“提交描述”" class="headerlink" title="git commit -m “提交描述”"></a>git commit -m “提交描述”</h4><h2 id="Git基本信息设置"><a href="#Git基本信息设置" class="headerlink" title="Git基本信息设置"></a>Git基本信息设置</h2><h4 id="设置用户名：-git-config-–global-user-name-‘CoderYangy’"><a href="#设置用户名：-git-config-–global-user-name-‘CoderYangy’" class="headerlink" title="设置用户名： git config –global user.name ‘CoderYangy’"></a>设置用户名： git config –global user.name ‘CoderYangy’</h4><h4 id="设置用户名邮箱：git-config-–global-user-name-‘1303007264-qq-com’"><a href="#设置用户名邮箱：git-config-–global-user-name-‘1303007264-qq-com’" class="headerlink" title="设置用户名邮箱：git config –global user.name ‘1303007264@qq.com’"></a>设置用户名邮箱：git config –global user.name ‘1303007264@qq.com’</h4><h2 id="初始化一个项目-新的Git仓库"><a href="#初始化一个项目-新的Git仓库" class="headerlink" title="初始化一个项目 新的Git仓库"></a>初始化一个项目 新的Git仓库</h2><h4 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h4><h2 id="创建文件，把文件提交到缓存区"><a href="#创建文件，把文件提交到缓存区" class="headerlink" title="创建文件，把文件提交到缓存区"></a>创建文件，把文件提交到缓存区</h2><h4 id="git-add"><a href="#git-add" class="headerlink" title="git add ."></a>git add .</h4><h2 id="把暂存区文件-添加到仓库"><a href="#把暂存区文件-添加到仓库" class="headerlink" title="把暂存区文件 添加到仓库"></a>把暂存区文件 添加到仓库</h2><h4 id="git-commit-m-‘描述’"><a href="#git-commit-m-‘描述’" class="headerlink" title="git commit -m ‘描述’"></a>git commit -m ‘描述’</h4><h2 id="下载克隆项目到本地"><a href="#下载克隆项目到本地" class="headerlink" title="下载克隆项目到本地"></a>下载克隆项目到本地</h2><h4 id="git-clone-资源路径"><a href="#git-clone-资源路径" class="headerlink" title="git clone 资源路径"></a>git clone 资源路径</h4><p> ##将本地仓库同步到远程仓库  github创建一个新的仓库，复制url</p><h4 id="git-remote-add-origin-https-github-com-xxxxx-xxxxx-git"><a href="#git-remote-add-origin-https-github-com-xxxxx-xxxxx-git" class="headerlink" title="git remote add origin https://github.com/xxxxx/xxxxx.git"></a>git remote add origin <a href="https://github.com/xxxxx/xxxxx.git" target="_blank" rel="noopener">https://github.com/xxxxx/xxxxx.git</a></h4><p> ##执行命令：git pull origin master</p><p>####该命令是先把github上的文件拉下来，注意在每次提交之前要首先进行pull，这是防止冲突。</p><h2 id="再提交"><a href="#再提交" class="headerlink" title="再提交"></a>再提交</h2><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装搭建hexo个人博客</title>
      <link href="/2020/06/11/%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/06/11/%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h2><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli</code></pre><hr><h2 id="初始化一个hexo文件"><a href="#初始化一个hexo文件" class="headerlink" title="初始化一个hexo文件"></a>初始化一个hexo文件</h2><pre class=" language-javascript"><code class="language-javascript">hexo init</code></pre><hr><h2 id="启动hexo"><a href="#启动hexo" class="headerlink" title="启动hexo"></a>启动hexo</h2><pre class=" language-javascript"><code class="language-javascript">hexo s</code></pre><hr><h2 id="新建一篇新的博客"><a href="#新建一篇新的博客" class="headerlink" title="新建一篇新的博客"></a>新建一篇新的博客</h2><pre class=" language-javascript"><code class="language-javascript">hexo n  <span class="token string">"博客名"</span></code></pre><hr><h2 id="清理一下hexo"><a href="#清理一下hexo" class="headerlink" title="清理一下hexo"></a>清理一下hexo</h2><pre class=" language-javascript"><code class="language-javascript">hexo clean</code></pre><h2 id="安装git部署插件"><a href="#安装git部署插件" class="headerlink" title="安装git部署插件"></a>安装git部署插件</h2><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git</code></pre><hr><h2 id="修改-config-yml-配置-在末尾"><a href="#修改-config-yml-配置-在末尾" class="headerlink" title="修改_config.yml 配置 在末尾"></a>修改_config.yml 配置 在末尾</h2><pre><code>deploy:  type: git  repo: https://github.com/CoderYangy/CoderYangy.github.io.git  branch: master</code></pre><hr><h2 id="部署到github远端"><a href="#部署到github远端" class="headerlink" title="部署到github远端"></a>部署到github远端</h2><pre><code>hexo d</code></pre><hr><p>##重新生成一下</p><pre><code>hexo g</code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
